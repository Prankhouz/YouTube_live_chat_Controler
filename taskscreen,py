import pygame
import json
import threading
import time

# Constants
JSON_FILE = "tasks.json"
WINDOW_WIDTH = 800
WINDOW_HEIGHT = 600
FONT_SIZE = 36
BG_COLOR = (30, 30, 30)
TEXT_COLOR = (255, 255, 255)
STRIKETHROUGH_COLOR = (200, 200, 200)

# Load data from JSON
def load_data():
    try:
        with open(JSON_FILE, "r") as f:
            return json.load(f)
    except Exception as e:
        print(f"Error reading JSON: {e}")
        return []

# Update display function
def update_display(screen, font, data):
    screen.fill(BG_COLOR)
    y = 50  # Starting Y position
    for entry in data:
        text = entry["text"]
        completed = entry["completion"]

        # Render text
        text_surface = font.render(text, True, STRIKETHROUGH_COLOR if completed else TEXT_COLOR)

        # Draw text
        screen.blit(text_surface, (50, y))

        # Draw strikethrough line if completed
        if completed:
            text_width, text_height = text_surface.get_size()
            pygame.draw.line(screen, STRIKETHROUGH_COLOR, (50, y + text_height // 2), (50 + text_width, y + text_height // 2), 2)

        y += 50  # Move to next line

    pygame.display.update()

# Background thread to check for updates
def update_data_periodically(update_event, screen, font, data_container):
    while not update_event.is_set():
        # Load updated data
        data_container["data"] = load_data()
        print("Data updated.")

        # Redraw the screen (even if minimized)
        update_display(screen, font, data_container["data"])

        # Wait before the next update
        time.sleep(15)

def main():
    # Initialize pygame
    pygame.init()
    screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
    pygame.display.set_caption("JSON Text Viewer")
    font = pygame.font.Font(None, FONT_SIZE)

    # Initial data load
    data = load_data()

    # Shared data container for updates
    data_container = {"data": data}

    # Event to signal thread termination
    update_event = threading.Event()

    # Start update thread
    threading.Thread(
        target=update_data_periodically, args=(update_event, screen, font, data_container), daemon=True
    ).start()

    # Main loop
    running = True
    while running:
        # Handle events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        # Update the display even if minimized
        updated_data = data_container["data"]
        update_display(screen, font, updated_data)

        # Limit frame rate
        pygame.time.delay(100)

    # Stop the update thread
    update_event.set()

    # Quit pygame
    pygame.quit()

if __name__ == "__main__":
    main()
